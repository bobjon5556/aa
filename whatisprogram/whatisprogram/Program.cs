namespace whatisprogram
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");

            {
                Console.Write("원의 반지름 : ");
                double i = int.Parse(Console.ReadLine());
                Console.WriteLine(i + "구의 겉넓이 = " 2 * Math.PI * i), ",구의부피 = " + Math.PI * i * i * i} ;
            }


            /*컴퓨터는 하드웨어와 소프트웨어로 구성된다 하드웨어는 pc, 스마트폰과같은
            *물리적으로 존재하는 장치를 의미한다. 소프트웨어는 이러한 하드웨어에 설치된 운영체제, 앱등을 의미한다
            *
            *프로그램이란 우리가 하고자하는 작업을 컴퓨터에게 전달하여 주는 역할을 하는 소프트웨어를 의미한다
            *프로그램 안에는 ;무엇을 어떤 식으로 해라;'같은 형태의 명령어들이 들어있다
            *
            *소프트웨어를 만드는 행위를 프로그래밍 또는 코딩이라고 한다
            *
            *컴퓨터가 알아듣는 언어는 한가지 뿐이다
            *0과 1의 형태로 구성되어 있으며 기계어라고 부른다
            *과거 초기형태의 컴퓨터는 이러한 기계어를 사용하여 프로그래밍 했었다
            *기계어는 인간에게 상당이 불편하고 난해한 언어기 때문에 사람이 이해하기 쉬운 프로그래밍 언어가 만들어 지게 된다.
            *프로그래밍 언어의 예약어와 문법으로 소프트웨어를 만드는 사람을 프로그래머또는 개발자라고 한다.
            *
            *프로그래밍 언어의 문법에 맞게 작성한 텍스트로 된 명령집합을 코드 또는 소스라고 한다.
            *
            *소스코드를 기계어로 번역하는 작업을 컴파일이라고 한다. 이러한 작업을 하는 소프트 웨어를 컴파일러 라고 한다.
            *
            *프로그래밍 하는 과정은 다음과 같다.
            *1.텍스트 에디터로 소스를 작성하여 파일로 작성한다. ex).cs 파일 같은거
            2.소스파일을 컴파일하여 실행 프로그램을 생성한다.   ex).exe 파일 같은거
            3.프로그램을 실행한다.
            이 중 1, 2 단계를 합쳐서 흔히 빌드라고 한다.

            프로그래밍 과정 중 발생한 오류를 버그라고 한다.
            오류를 탐색하고 수정하는 과정을 디버그 디버깅 또는 트러블슈팅이라고 한다.


                        c#의 경우 -> IL코드로 변환(Intermediate Language) ->기계어
            ILdasm

            c#의 특징
            C#은 .Net을 위한 많은 언어 중 하나로 , 마이크로 소프트의 닷넷 플랫폼을 기반으로 한다.
            절차적 언어와 객체지향 언어의 특징, 그리고 함수형 프로그래밍 스타일을 제공하는 다중 프로그래밍 언어이다.

            c#은 c, c++ Java, Javascript와 기초 문법이 비슷하다.
            C#은 자동으로 메모리를 관리한다. (Garbage collecction기능을 제공)
            C#은 컴파일 기반언어이다.
            C#은 강력한 형식(strong typed)의 언어이다.
            C#은 Generic과 LINQ등 편리한 기능을 제공한다.

            .Net(닷넷)
            닷넷은 프레임워크와 닷넷코어를 합쳐서 편하게 닷넷이라고 한다.
            닷넷은 소프트웨어 프레임워크로, 응용 프로그램의 개발 속도를 높이는 데 도움이 되는 API 및 서비스 모음이다.

            함수, 라이브러리 API 란?
            함수:프로그램에서 사용하기 위한 기능의 단위를 의미한다. 보통 하나의 함수는 하나의 기능을 한다.
            라이브러리:어떠한 기능을 구현할 때 도움이 되는 기능, 함수의 모음이다.
            API:어떠한 기능을 구현할 때 도움이 되도록 문서와 함께 제공되는 라이브러리, 함수의 모음이다.

            플랫폼:프로그램을 실행하기 위한 배경환경 또는 운영체제를 의미한다.

            C#의 기본 코드 구조
            C#프로그램은 class와 ain() 메서드가 반드시 있어야 하고 하나 이상의 문법을 나타낸다.
            C#의 기본코드는 위쪽에 네임스페이스 선언부 Main() 메서드가 오고중괄호 시작과끝을 프로그램 범위를 구분한다.

            네임스페이스:자주 사용하는 네임스페이스를 위쪽에미리 선언해 둘 수 있다.
            main()메서드:프로그램의 시작 지점이며, 반드시 있어야한다
            중괄호({}):프로그램의 범위를 구분 짓는다.
            세미클론(;):명령어(문,문장)의 끝을 나타낸다.

            Main() 메서드
            메서드:클래스에서 제공되는 멤버함수를 의미한다.
            Main()앞에 static키워드가 있어 개체를 생성하지 않고 바로 실행할 수 있다.
            Main()메서드가 2개이면 '프로그램 진입점이 2개이상 정의되어 있습니다"라는에러메세지가 출력되어 프로그램이 컴파일 되지 않는다.

            대,소문자 구분하기
            C#은 대, 소문자를 구분한다.정확히 입력하지 않으면 에러가 발생한다.
            문법, 스타일, 패턴
            문법:프로그래밍을 하기 위해 반드시 지켜야 하는 규칙
            스타일:프로그래밍 가이드라인인다.
            패턴:자주 사용되는 규칙과 스타일 모음이다.

            정규화된 이름
            정규화된이름은 아래와같이 네임스페이스 이름과 형식이름까지 전체를 지정하는 방식이다.

            출력문:명령 프롬포트에 출력되는 구문
            주석문:실행에 영향을 주지않는 코드 설명문
            //한줄주석
            /*여러줄 주석/*


            들여쓰기:프로그램 소스 코드의 가독성을 위해서 사용하는 일반적인 들여쓰기 규칙 보통 4칸의 공백 또는 탭을 사용하지만 혼용하면 안된다.
            공백처리:C#에서 명령어 사이, 기호와 괄호 사이의 공백, 탭,줄바꿈은 무시된다.

            이스케이프 시퀸스
            C#은  WriteLine() 메서드에서 사용할 확장문자를제공하는데 이를 이스케이프 시퀸스라고 한다.
            역슬래쉬 기호와 특정 문자를 조합하면 특별한 기능을 사용할 수 있다
            자세한 이스케이프 시퀸스 내용은 검색으로 찾아보자


            /*
             * 문자열 보간법
             * 문자열보간법 또는 문자열 탬플릿이라고도 한다.
             * 문자열을 묶어서 처리하기 위한 기능이다. 기존에는 String() aptjemfmf wnfh tkdydgoTdjTsmsep,
             * C#6.0버전부터 $"{}" 형태로 간결하게 제공하고 있다.
             * 
             */
            /*
            string hello = "Hello";
            string world = "world";
            Console.WriteLine("{0},{1}", hello, world);
            Console.WriteLine($"{hello}, {world}");

            const int THREE_NUMBER = 3;
            const string ODD_WORD = "홀수";
            Console.WiteLine($"{HREE_NUMBER


            변수
            프로그램에서 값을 다루려면 데이터를 메모리에 잠시 보관해놓고 사용할 수 있는 임시 저장곤간이 필요하다.
            이때 변수를 사용한다. 변수를 사용하는 순서는 선언(메모리에 공간을 확보)하고 정의(대입, 할당)하여사용하는 것이다.
            변수는 데이터형식, 변수의 이름, 대입한 값으로 이루어져 있다.
            변수선언:메모리에 데이터를 저장할 공간을 확보하는 것이다.
            변수정의:확보한 공간에 값을 저장하는 것이다.
            변수 초기화:변수를 선언한 직후, 초기값으로 정의하는 것이다. 초기화는 변수의 초기값을 명확하게 정의하여 원치않는 논리적인 오류를 방지하는 역할을 한다.

            memory safety
            이스케이프 시퀸스

           /* 
            * bit:0 또는 1을 표현할 수 있는 최소단위
            * {0}{0}
            * {0}{1}
            * {1}{0}
            * {1}{1}
            * byte 숫자를 세는 단위 8bit=1byte
            * 
            * 변수 사용할 때 주의사항(규칙)
            * 변수의 이름을 지을 때는 다음 규칙을 지켜야 한다.
            * 변수의 첫 글자는 반드시 문자로 지정한다. 숫자는 변수의 이름의 첫글자로 사용할 수 없다.
            * 길이는 255자 이하로 하고 공백을 포함할 수 없다.
            * 영문자와 숫자, 언더스코어(_) 조합으로 사용하며ㅛ 기타 특수 기호는 사용할 수 없다.
            * C#에서 사용하는 키워드는 사용할 수 없다.
            * 변수는 대, 소문자를 구분하고, 일반적으로 소문자로 사용한다.
            * 변수는 타인이 보더라도 이해할 수 있는 이름으로 사용한다.
            * 
            * 
            * 데이터형식
            * 변수에 저장할 수 있는 데이터의 종류를 자료형(Data type)이라고 한다.
            * int, string, bool, double, object 등 c#에서 기본으로 제공하는 데이터 형식을 기본형식(primitive type)이라고 한다.
            * 
            * int:정수형 데이터 타입(음수, 양수, 0)
            * float:실수형 데이터 타입(부동소수점 형태/ 3.14등)
            * bool:논리값을 가지는 데이터 타입(참과 거짓)
            * char:한 문자를 가지는 데이터 타입('a')
            * string:문자열을 가지는 데이터 타입("Hello world")
            * object:c#에서 모든 자료형의 부모형 데이터 타입(모든 데이터를 저장 가능)
            * 
            * 3시45분
            * 
            */


            //변수

            /*
             * 상수와 리터럴
             * 
             * 상수
             * 변수를 선언할 때 앞에 const 키워드를 붙이면 상수(constant)가 된다.
             * 한번 상수로 선언된 변수는 다시 값을 바꿀 수 없고, 반드시 선언과 동시에 초기화 해야 한다. 
             * 이러한 const 키워드를 붙인 변수를 상수 또는 지역(local)상수라고 한다. 상수는 주로 대문자로 표현된다.
             * 
             * 리터럴
             * 변수에 저자아기 위해 직접 대입하는 값ㅅ 자체를 리터럴(literal)이라고 한다
             * 정수형 리터럴:숫자 그대로 표현한다 ex)1234
             * 실수형 리터럴:대문자 F또는 소문자 f를 접미사로 붙여 표현한다 ex)3.14
             * 문자형 리터럴:작은 따옴표로 묶어서 표현한다 ex)'a'
             * 문자열 리터럴:큰 따옴표로 묶어서 표현한다 ex)"hello"
             * 
             * 
             * 숫자 구분자 사용
             * C#7.0버전부터는 언더스코어(_)문자를 사용하는 숫자 구분자(Digit separator)를 제공한다.
             * 숫자 형식을 표현할 때 언더스코어 문자는 무시한다. 이를 이용하면 긴 숫자를 표시할 때 가독성을 높일 수 있다.
             * 
             * null 키워드
             * C#에서 null키워드는 '아무것도 없는 값'을 의미한다
             * 
             * null 가능 형식(nullable)
             * 숫자 형식의 변수를 선언할 때 int?, float? 와 같이 물음표(?)기호를 붙이면 null가능 형식으로변경된다
             * 이러한 null가능 형식에는 아무런 값도 없음을 의미하는 null을 대입할 수 있다.
             * 
             * 
             * 자동 타입 추론
             * 변수에 대입하는 값의 데이터 타입이 명시적이거나 명확할 때 데이터 타입을 명시하지 않고 생략할 수 있다.
             * 자동 타입 추론이란 컴파일러가 대입하는 값 또는 변수의 데이터 타입으로 다른 한 쪽의 데이터 타입을 추론하는 기능을 의미한다.
             * 
             * default 값
             * C#6.0버전 부터 지동타입 추론으로 기본형식에 deFault 값을 대입할 수 있다.
             * 기본형식마다 정해진 default 값이 존재한다.
             * 
             */

            


            static void main(string[] args)
            {
                Console.Write("원의 반지름 : ");
                int i = int.Parse(Console.ReadLine());
                double d = i * 3.14;
                Console.WriteLine(i + "둘레 =" + 2 * Math.PI * d * d + "넓이");


            }

            /*
            * 열거형 형식
            * C#에서 열거형(Enumeration)형식은 기억하기 어려운 상수들을 기억하기 쉬운 이름 하나로 묶어 관리하는 표현 방식이다.
            * 일반적으로 열거형으로 줄여 말한다. 열거형은 enum키워드를 사용하고 이늄 또는 이넘으로 읽는다.
            * 열거형은 클래스 범위 내에 정의해야하며, 매서드 범위 안에는 정의할 수 없다.
            * 
            */


            Align align = Align.top;
        }
             
            enum Align { top, bottom, left, right };




        /*
         * 입출력에 대해서
         * 프로그램을 실행할 때마다 서로 다른 값을 입력 받으려면 콘솔에서 입력한 값을 변수에 저장할 수 있어야 한다.
         * 키보드로 입력받고 모니터로 출력하는 일반적인 내용을 표준 입출력이라고 한다.
         * 
         * systemConsole.ReadLine(): 콘솔에서 한줄을 입력받는다.
         * systemConsole.Read(): 콘솔에서 한 문자를 정수로 입력받는다.
         * systemConsole.Readkey():콘솔에서 다음 문자나 사용자가 누른 기능 키를 가져온다
         * 
         *
         *
         *
         *
         *
         *
         *형식변환
         *systemConsole.ReadLine()메서드를 사용하여 콘솔에서 입력받은 데이터는 문자열이다. 
         *문자열 대신 정수나 실수 데이터를 입력받고 싶다면 입력된 문자열을 원하는 데이터 형식으로 변환할 수 있어야 한다.
         *
         *키워드:캐스팅연산자, 암시적)묵시적)형변환, 명시적 형변환
         *
         */


       




        
    }
}